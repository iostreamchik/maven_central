import com.vanniktech.maven.publish.AndroidSingleVariantLibrary

plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.signing)
    alias(libs.plugins.maven.publish.plugin)
}

android {
    namespace 'io.github.iostreamchik.toast'
    compileSdk 34

    defaultConfig {
        minSdk 26

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }
    buildTypes {
        debug {
            println "<<<--- Building library --->>> buildTypes debug"
            it.buildConfigField 'String', 'DEBUG_API_HOST', "\"DEBUG host >>>\""
        }
        release {
            println "<<<--- Building library --->>> buildTypes release"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            it.buildConfigField 'String', 'DEBUG_API_HOST', "\"Release host >>>\""
        }
    }
    buildFeatures {
        buildConfig true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
}

dependencies {
    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
}

def lib_groupId = 'io.github.iostreamchik.toast'
def project_description = "Test Android Library publishing"
def lib_version = '1.0.6'

mavenPublishing {
    def tasks = project.gradle.startParameter.taskNames

    def isCentralPublish = tasks.any {
        it.endsWith("publishToMavenCentral") || it.endsWith("publishMavenPublicationToGitHubPackagesRepository")
    }
    def isLocalPublish   = tasks.any { it.endsWith("publishToMavenLocal") }

    def releaseBuild = false
    if (isCentralPublish) {
        // Always release for Maven Central & GitHub Packages
        releaseBuild = true
    } else if (isLocalPublish) {
        // For MavenLocal, infer from assemble* in the same invocation
        releaseBuild = tasks.any { it.endsWith("assembleRelease") }
    }

    def variant = releaseBuild ? "release" : "debug"
    println "<<<--- Building library --->>> VARIANT [$variant]"

    // Configure publishing
    publishToMavenCentral(false)
    configure(new AndroidSingleVariantLibrary(variant, true, false))

    if (variant == "release") {
        println '<<<--- Building library --->>> signAllPublications'
        signAllPublications()
    }

    def artifactName = project.name
    coordinates(lib_groupId, artifactName, lib_version)
    pom {
        name = "Super Toast"
        description = project_description
        inceptionYear = "2025"
        url = "https://github.com/iostreamchik/maven_central"
        licenses {
            license {
                name = "The Apache License, Version 2.0"
                url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution = "http://www.apache.org/licenses/LICENSE-2.0.txt"
            }
        }
        developers {
            developer {
                name = "iostreamchik"
                url = "https://github.com/iostreamchik/"
            }
        }
        scm {
            url = "https://github.com/iostreamchik/maven_central/"
            connection = "scm:git:git://github.com/iostreamchik/maven_central.git"
            developerConnection = "scm:git:ssh://git@github.com/iostreamchik/maven_central.git"
        }
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/iostreamchik/maven_central")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
